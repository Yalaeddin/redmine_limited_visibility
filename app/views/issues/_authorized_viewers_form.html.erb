<% if @issue.project.module_enabled?("limited_visibility")

    config_functions = ProjectFunctionTracker.joins(:project_function).includes(:project_function).where("project_id = ? AND tracker_id = ?", @issue.project_id, @issue.tracker_id)
    hidden_functions = config_functions.reject{ |f| f.visible == true }.map{ |c| c.function } if config_functions.present?

    if @issue.project.autochecked_functions_mode == '1'
      viewers = function_ids_for_current_viewers(@issue)
    else
      viewers = function_ids_for_current_tracker(@issue, @previous_tracker_id)
    end
%>

  <%= render "functions/select_involved_roles", viewers: viewers, current_user_visibility_roles: functional_roles_for_current_user(@issue.project), hidden_functions: hidden_functions %>
  <%= hidden_field_tag "issue[authorized_viewers]", "|#{viewers.join("|")}|", :id => "authorized_viewers" %>

  <%= hidden_field_tag 'previous_tracker_id', @issue.tracker.id %>

  <% if Setting['plugin_redmine_limited_visibility']['must_have_at_least_one_visible_function'] == 'true' %>
    <script>
      $(function() {
        $('#issue-form').submit(function(e) {
          e.preventDefault();
          var form = this;
          if ($('.role.involved').not('.disabled').not('.hidden_function').length == 0) {
            alert('<%= l('alert_cant_remove_all_visibility_roles') %>');
            return false;
          }else{
            form.submit(); // submit bypassing the jQuery bound event
          }
        });
      })
    </script>
  <% end %>

<% end %>
