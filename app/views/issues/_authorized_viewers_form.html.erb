<%  member = Member.find_by_user_id_and_project_id(User.current.id, @project.id)
    # member cannot remove his current roles
    @current_roles = member.roles.find_all_visibility_roles if member.present?

    viewers = []
    if @issue.new_record? # create new issue
      if member && member.roles.find_all_visibility_roles.present? # current user has at least one visibility role
        member.roles.find_all_visibility_roles.each do |r|
          viewers = viewers | r.authorized_viewers.split('|') if r.authorized_viewers
        end
      else # current user has no visibility role (can see every issues)
        viewers = Role.find_all_visibility_roles.map(&:id)
      end
    else # update existing issue
      if @issue && @issue.authorized_viewers.present?
        viewers = @issue.authorized_viewers.split('|').delete_if(&:blank?)
      else
        viewers = Role.find_all_visibility_roles.map(&:id)
      end
    end
    value = viewers.join('|') + '|'
%>

<script>
  $(function() {
    $('#issue-form').submit(function(e) {
      e.preventDefault();
      var form = this;
      if ($('#issue-form .role.involved').length === 0) {
        alert('<%= l('alert_cant_remove_all_visibility_roles') %>');
        return false;
      }else{
        form.submit(); // submit bypassing the jQuery bound event
      }
    });
  })
</script>

<%= render "roles/select_involved_roles", viewers: value %>
