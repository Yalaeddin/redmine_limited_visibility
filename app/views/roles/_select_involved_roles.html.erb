<script>
  function disable_role_which_cant_be_removed() {
    if ($('#involved-roles .role.involved.mine').length !== 1) {
      $('#involved-roles .role.mine').removeClass('disabled');
    } else {
      $('#involved-roles .role.involved.mine').addClass('disabled');
    }
  }
  $(function() {
    $('.role').on('click', function() {
      if (!$(this).hasClass('disabled')){
        $(this).toggleClass('involved');
        var authorized = [];
        $('#involved-roles .role.involved').each(function() {
          authorized.push($(this).data('role-id'))
        });
        $('#role_authorized_viewers').val('|' + authorized.join('|') + '|');
        $('#issue_authorized_viewers').val('|' + authorized.join('|') + '|');

        // Update disable class TODO this behaviour should be double-checked
        disable_role_which_cant_be_removed();
      }
    })
  });
</script>

<p id=involved-roles class=involved-roles>
  <label><%= l(:label_involved_members) %></label>
  <% Role.visibility_roles.sorted.each do |role|
      role_is_involved = viewers.include?(role.id)
      role_is_mine = current_user_visibility_roles.include?(role)
      role_is_disabled = @role==role || (role_is_mine && role_is_involved && (viewers.select{ |r| current_user_visibility_roles.include?(Role.find(r))}.try(:size)==1)) #disable role if it's the only one currently selected (it can only be removed after selecting another one)
    %>
    <% styles = (role_is_disabled ? "involved disabled" : (role_is_involved ? 'involved' : '')) %>
    <% styles << (role_is_mine ? ' mine' : '') %>
    <%= render "roles/visibility_role", :role => role, :styles => styles %>
  <% end %>
</p>

<%= hidden_field_tag "role[authorized_viewers]", "|#{viewers.join("|")}|" %>
<%= hidden_field_tag "issue[authorized_viewers]", "|#{viewers.join("|")}|" %>
